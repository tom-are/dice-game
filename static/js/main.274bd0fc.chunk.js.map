{"version":3,"sources":["logo.svg","components/Die/Die.component.js","components/Player/Player.component.js","components/Game/Game.component.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","dieIconMap","Map","faDiceOne","faDiceTwo","faDiceThree","faDiceFour","faDiceFive","faDiceSix","Dice","number","className","normalisedNumber","roundedNumber","Math","floor","maximisedNumber","min","max","normaliseDieNumber","icon","get","data-testid","color","size","defaultProps","Player","name","roll","wins","winner","rollSingleDie","random","Game","useState","roundsPlayed","setRoundsPlayed","dice","setDice","scores","setScores","result","setResult","playerScore","cpuScore","playerDie","cpuDie","useEffect","type","onClick","App","src","logo","alt","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qFAAAA,EAAOC,QAAU,IAA0B,kC,gPCoBrCC,EAAa,IAAIC,IAAI,CACzB,CAAC,EAAGC,KACJ,CAAC,EAAGC,KACJ,CAAC,EAAGC,KACJ,CAAC,EAAGC,KACJ,CAAC,EAAGC,KACJ,CAAC,EAAGC,OAGAC,EAAO,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,OAAQC,EAAgB,EAAhBA,UAChBC,EAhBmB,SAAAF,GACzB,IAAMG,EAAgBC,KAAKC,MAAML,GAC3BM,EAAkBF,KAAKG,IAAIJ,EAAe,GAChD,OAAOC,KAAKI,IAAI,EAAGF,GAaMG,CAAmBT,GACtCU,EAAOnB,EAAWoB,IAAIT,GAC5B,OACE,kBAAC,IAAD,CACED,UAAWA,EACXW,cAAA,cAAoBV,GACpBQ,KAAMA,EACNG,MAzBgB,UA0BhBC,KAAK,QAUXf,EAAKgB,aAAe,CAClBd,UAAW,IAGEF,QC/CTiB,EAAS,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,KAAMC,EAAyB,EAAzBA,KAAMC,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,OAClC,OACE,yBAAKnB,UAAU,UACb,6BACE,gCAASgB,IAEX,kBAAC,EAAD,CACEjB,OAAQkB,EACRjB,UAAWmB,EAAS,sBAAwB,gBAE9C,sCAAYD,KAYlBH,EAAOD,aAAe,CACpBG,KAAM,EACNC,KAAM,EACNC,QAAQ,GAGKJ,QC7BTK,G,MAAgB,kBAAMjB,KAAKC,MAAsB,EAAhBD,KAAKkB,UAAgB,IAmF7CC,MAjFf,WAAgB,MAI0BC,mBAAS,GAJnC,mBAIPC,EAJO,KAIOC,EAJP,OAKUF,mBAAS,CAAC,EAAG,IALvB,mBAKPG,EALO,KAKDC,EALC,OAMcJ,mBAAS,CAAC,EAAG,IAN3B,mBAMPK,EANO,KAMCC,EAND,OAOcN,mBAAS,aAPvB,mBAOPO,EAPO,KAOCC,EAPD,mBASkBH,EATlB,GASPI,EATO,KASMC,EATN,mBAUcP,EAVd,GAUPQ,EAVO,KAUIC,EAVJ,KAiDd,OAJAC,qBAAU,WA5Ba,IAAjBZ,EAKAU,IAAcC,EAKdD,EAAYC,GACdN,EAAU,CAACG,EAAc,EAAGC,IAC5BF,EAAU,cAEVF,EAAU,CAACG,EAAaC,EAAW,IACnCF,EAAU,gBATVA,EAAU,kBALVA,EAAU,eA6BX,CAACP,IAGF,yBAAKxB,UAAU,QACb,yBAAKA,UAAU,iBACb,kBAAC,EAAD,CACEgB,KAAK,MACLC,KAAMiB,EACNhB,KAAMc,EACNb,OAAQe,EAAYC,IAEtB,kBAAC,EAAD,CACEnB,KAAK,WACLC,KAAMkB,EACNjB,KAAMe,EACNd,OAAQgB,EAASD,KAIrB,yBAAKlC,UAAU,gBACb,4BAAK8B,GACL,4BACEO,KAAK,SACL1B,cAAY,YACZX,UAAU,eACVsC,QAhCU,WAChBX,EAAQ,CAACP,IAAiBA,MAC1BK,EAAgBD,EAAe,KA0B3B,iB,MCzDOe,MAZf,WACE,OACE,yBAAKvC,UAAU,OACb,4BAAQA,UAAU,cAAcW,cAAY,cAC1C,yBAAK6B,IAAKC,IAAMC,IAAI,oBAGtB,kBAAC,EAAD,QCEcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.274bd0fc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.0d580b38.svg\";","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {\n  faDiceOne,\n  faDiceTwo,\n  faDiceThree,\n  faDiceFour,\n  faDiceFive,\n  faDiceSix,\n} from '@fortawesome/free-solid-svg-icons';\n\nconst DEFAULT_COLOR = '#1cb2e7';\n\nconst normaliseDieNumber = number => {\n  const roundedNumber = Math.floor(number);\n  const maximisedNumber = Math.min(roundedNumber, 6);\n  return Math.max(1, maximisedNumber);\n};\n\nconst dieIconMap = new Map([\n  [1, faDiceOne],\n  [2, faDiceTwo],\n  [3, faDiceThree],\n  [4, faDiceFour],\n  [5, faDiceFive],\n  [6, faDiceSix],\n]);\n\nconst Dice = ({ number, className }) => {\n  const normalisedNumber = normaliseDieNumber(number);\n  const icon = dieIconMap.get(normalisedNumber);\n  return (\n    <FontAwesomeIcon\n      className={className}\n      data-testid={`die-${normalisedNumber}`}\n      icon={icon}\n      color={DEFAULT_COLOR}\n      size=\"6x\"\n    />\n  );\n};\n\nDice.propTypes = {\n  number: PropTypes.number.isRequired,\n  className: PropTypes.string,\n};\n\nDice.defaultProps = {\n  className: '',\n};\n\nexport default Dice;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Player.css';\nimport Die from '../Die/Die.component';\n\nconst Player = ({ name, roll, wins, winner }) => {\n  return (\n    <div className=\"Player\">\n      <div>\n        <strong>{name}</strong>\n      </div>\n      <Die\n        number={roll}\n        className={winner ? 'Player__die--winner' : 'Player__die'}\n      />\n      <div>Wins: {wins}</div>\n    </div>\n  );\n};\n\nPlayer.propTypes = {\n  name: PropTypes.string.isRequired,\n  roll: PropTypes.number,\n  wins: PropTypes.number,\n  winner: PropTypes.bool,\n};\n\nPlayer.defaultProps = {\n  roll: 0,\n  wins: 0,\n  winner: false,\n};\n\nexport default Player;\n","import React, { useState, useEffect } from 'react';\nimport Player from '../Player/Player.component';\nimport './Game.css';\n\nconst rollSingleDie = () => Math.floor(Math.random() * 6) + 1;\n\nfunction Game() {\n  /*\n    Internal states\n   */\n  const [roundsPlayed, setRoundsPlayed] = useState(0);\n  const [dice, setDice] = useState([1, 1]);\n  const [scores, setScores] = useState([0, 0]);\n  const [result, setResult] = useState(\"Let's go!\");\n\n  const [playerScore, cpuScore] = scores;\n  const [playerDie, cpuDie] = dice;\n\n  /**\n   * Increments the scores (if necessary) after dice have been rolled,\n   * and sets the result of the round\n   */\n  const updateScores = () => {\n    if (roundsPlayed === 0) {\n      setResult(\"Let's go!\");\n      return;\n    }\n\n    if (playerDie === cpuDie) {\n      setResult(\"It's a draw...\");\n      return;\n    }\n\n    if (playerDie > cpuDie) {\n      setScores([playerScore + 1, cpuScore]);\n      setResult('You won!');\n    } else {\n      setScores([playerScore, cpuScore + 1]);\n      setResult('You lost...');\n    }\n  };\n\n  /**\n   * Plays a single round, by rolling the dice and updating the state\n   * This triggers the useEffect to then recalculate the result of the game\n   */\n  const playRound = () => {\n    setDice([rollSingleDie(), rollSingleDie()]);\n    setRoundsPlayed(roundsPlayed + 1);\n  };\n\n  useEffect(() => {\n    updateScores();\n  }, [roundsPlayed]);\n\n  return (\n    <div className=\"Game\">\n      <div className=\"Game__Players\">\n        <Player\n          name=\"You\"\n          roll={playerDie}\n          wins={playerScore}\n          winner={playerDie > cpuDie}\n        />\n        <Player\n          name=\"Computer\"\n          roll={cpuDie}\n          wins={cpuScore}\n          winner={cpuDie > playerDie}\n        />\n      </div>\n\n      <div className=\"Game__footer\">\n        <h1>{result}</h1>\n        <button\n          type=\"button\"\n          data-testid=\"playRound\"\n          className=\"Game__button\"\n          onClick={playRound}\n        >\n          Roll dice!\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default Game;\n","import React from 'react';\nimport logo from './logo.svg';\nimport Game from './components/Game/Game.component';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\" data-testid=\"app-header\">\n        <img src={logo} alt=\"Origami Energy\" />\n      </header>\n\n      <Game />\n    </div>\n  );\n}\n\nexport default App;\n","/* istanbul ignore file */\n/* eslint-disable */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","/* istanbul ignore file */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}